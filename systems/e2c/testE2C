[the, shopper, drank, the, pepsi]
(thereExists ?shopper4675 
  (and (isa ?shopper4675 (FrequentPerformerFn Shopping ) ) 
   (thereExists ?pepsi6 
     (and (isa ?pepsi6 PepsiCola ) 
     (and (occursDuring ?drank7550 Past ) 
     (and (isa ?drank7550 DrinkingEvent ) 
     (performedBy ?drank7550 ?shopper4675 ) 
     (consumedObject ?drank7550 ?pepsi6 ) ) ) ) ) ) )       
                                                  
[the, shopper, drinks, the, pepsi]
(thereExists ?shopper4675 
  (and (isa ?shopper4675 (FrequentPerformerFn Shopping ) ) 
   (thereExists ?pepsi6 
     (and (isa ?pepsi6 PepsiCola ) 
     (and (occursDuring ?drank7550 Now ) 
     (and (isa ?drank7550 DrinkingEvent ) 
     (performedBy ?drank7550 ?shopper4675 ) 
     (consumedObject ?drank7550 ?pepsi6 ) ) ) ) ) ) )                           

[the, shopper, bought, fries]
(thereExists ?shopper4794 
   (and (isa ?shopper4794 (FrequentPerformerFn Shopping ) ) 
   (and (and (isa ?fries20 Frying ) 
   (objectOfStateChange ?fries20 ?POSSESSOR13610 ) ) 
   (and (occursDuring ?bought3 Past ) 
   (and (isa ?bought3 Buying ) 
   (buyer ?bought3 ?shopper4794 ) 
   (objectPaidFor ?bought3 ?fries20 ) ) ) ) ) )

[the, shopper, bought, fries, with, his, pepsi]
(thereExists ?shopper4863 
    (and (isa ?shopper4863 (FrequentPerformerFn Shopping ) ) 
    (and (isa ?pepsi42 PepsiCola ) 
    (and (and (and (isa ?fries103 Frying ) 
       (objectOfStateChange ?fries103 ?POSSESSOR13613 ) ) 
    (and (isa ?bought4 Buying ) (seller ?bought4 ?shopper4863 ) 
    (objectPaidFor ?bought4 ?fries103 ) 
    (buyingPerformer ?bought4 ?pepsi42 ) ) ) 
    (equals ?POSSESSOR13613 
            (OneOfFn (PronounFn ThirdPerson-NLAttr Singular-NLAttr Masculine-NLAttr PossessivePronoun-Post ) 
             (PronounFn ThirdPerson-NLAttr Singular-NLAttr Masculine-NLAttr PossessivePronoun-Pre ) ) ) 
    (controls (OneOfFn (PronounFn ThirdPerson-NLAttr Singular-NLAttr Masculine-NLAttr PossessivePronoun-Post ) 
                           (PronounFn ThirdPerson-NLAttr Singular-NLAttr Masculine-NLAttr PossessivePronoun-Pre ) )
                   ?pepsi42 ) ) ) ) )



|    english2Kif("I see you").
assert(known_phrase(verbSemTrans(#$and(#$isa(?ACTION1, #$VisualPerception), #$pe
rformedBy(?ACTION1, ?Speaker), #$perceivedThings(?ACTION1, ?TargetAgent)), true)
))


e2c("George fell last year").

[[txt, 'George'], [tag, staart, nnp, np]]
[[txt, fell], [tag, z, vbd]]
[[txt, last], [tag, z, jj, ap, 'Adjective', 'Adverb', 'CountNoun', 'WHAdverb']]
[[txt, year], [tag, laast, nn, 'CountNoun']]

seg([p('VP_non_cyclic', 1, 1), p('VP_non_cyclic', 2, 2), p('PP_non_cyclic', 3, 3), p('VP_non_cyclic', 4, 4)])

(implies 
  (equals ?GEORGE2 
    (OneOfFn EddieGeorge-FootballPlayer-American 
      (CityNamedFn "George" RepublicOfSouthAfrica ) ) ) 
  (and 
    (isa ?FELL1 Event ) 
    (implies 
      (and 
        (isa ?YEAR5 CalendarYear ) 
        (isa ?YEAR5 ContemporaryArtifact ) ) 
      (or 
        (and 
          (isa ?FELL1 CuttingDownATree ) 
          (objectOfStateChange ?FELL1 ?YEAR5 ) 
          (doneBy ?FELL1 ?GEORGE2 ) ) 
        (and 
          (organismKilled ?FELL1 ?YEAR5 ) 
          (isa ?FELL1 CuttingDownATree ) 
          (performedBy ?FELL1 ?GEORGE2 ) ) ) ) ) )

e2c("Oil field revenues fell last year").

[[txt, 'Oil', field], [tag, staart]]
[[txt, revenues], [tag, z, nns, 'CountNoun']]
[[txt, fell], [tag, z, vbd]]
[[txt, last], [tag, z, jj, ap, 'Adjective', 'Adverb', 'CountNoun', 'WHAdverb']]
[[txt, year], [tag, laast, nn, 'CountNoun']]


e2c("I see you").

[[txt, 'I'], [tag, staart, ppss, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, see], [tag, z, vb]]
[[txt, you], [tag, laast, ppss, ppo, prp, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]

seg([p('ADVP_non_cyclic', 1, 1), p('VP_non_cyclic', 2, 2), p('ADVP_non_cyclic', 3, 3)])

(thereExists ?SPEAKER 
  (and 
    (isa ?SPEAKER Person ) 
    (and 
      (isa ?SEE1 Event ) 
      (thereExists ?TARGETAGENT 
        (and 
          (isa ?TARGETAGENT Person ) 
          (or 
            (awareOf ?SPEAKER ?TARGETAGENT ) 
            (and 
              (isa ?SEE1 VisualPerception ) 
              (performedBy ?SEE1 ?SPEAKER ) 
              (perceivedThings ?SEE1 ?TARGETAGENT ) ) ) ) ) ) ) )

e2c("I seen the wood").

[[txt, 'I'], [tag, staart, ppss, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, seen], [tag, z, vbn]]
[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, wood], [tag, laast, nn, 'CountNoun', 'MassNoun', 'MassNoun-Generic']]

seg([p('ADVP_non_cyclic', 1, 1), p('VP_non_cyclic', 2, 2), p('QP', 3, 4)])

(thereExists ?SPEAKER 
  (and 
    (isa ?SPEAKER Person ) 
    (and 
      (isa ?SEEN1 Event ) 
      (thereExists ?WOOD5 
        (and 
          (isa ?WOOD5 
            (OneOfFn Wood Wood-GolfClub WoodedArea ) ) 
          (or 
            (awareOf ?SPEAKER ?WOOD5 ) 
            (and 
              (isa ?SEEN1 VisualPerception ) 
              (performedBy ?SEEN1 ?SPEAKER ) 
              (perceivedThings ?SEEN1 ?WOOD5 ) ) ) ) ) ) ) )

e2c("I sawed the wood").

[[txt, 'I'], [tag, staart, ppss, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, sawed], [tag, z, 'NLWordForm', 'Verb', 'Adjective']]
[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, wood], [tag, laast, nn, 'CountNoun', 'MassNoun', 'MassNoun-Generic']]


(thereExists ?SPEAKER 
  (and 
    (isa ?SPEAKER Person ) 
    (and 
      (isa ?SAWED1 Event ) 
      (thereExists ?WOOD11 
        (and 
          (isa ?WOOD11 
            (OneOfFn Wood Wood-GolfClub WoodedArea ) ) 
          (and 
            (isa ?SAWED1 SawingSomething ) 
            (objectOfStateChange ?SAWED1 ?WOOD11 ) 
            (doneBy ?SAWED1 ?SPEAKER ) ) ) ) ) ) )

e2c("I see two books on a shelf").

[[txt, 'I'], [tag, staart, ppss, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, see], [tag, z, vb]]
[[txt, two], [tag, z, cd, 'CountNoun', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, books], [tag, z, nns, 'CountNoun', 'ProperCountNoun', 'ProperNoun']]
[[txt, on], [tag, z, in, 'Adverb', 'Preposition', 'Preposition-Directional-Telic', 'Preposition-Locative', 'VerbParticle', 'WHAdverb']]
[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, shelf], [tag, laast, nn, 'CountNoun']]

seg([p('ADVP_non_cyclic', 1, 1), p('VP_non_cyclic', 2, 2), p('QP', 3, 4), p('PP_non_cyclic', 5, 5), p('QP', 6, 7)])

(thereExists ?SPEAKER 
  (and 
    (isa ?SPEAKER Person ) 
    (and 
      (isa ?SEE2 Event ) 
      (thereExistExactly 2 ?TWO2 
        (and 
          (and 
            (isa ?TWO2 BookCopy ) 
            (isa ?TWO2 Thing ) ) 
          (and 
            (or 
              (awareOf ?SPEAKER ?TWO2 ) 
              (and 
                (isa ?SEE2 VisualPerception ) 
                (performedBy ?SEE2 ?SPEAKER ) 
                (perceivedThings ?SEE2 ?TWO2 ) ) ) 
            (thereExists ?SHELF5 
              (and 
                (isa ?SHELF5 ShelfInABuilding ) 
                (on-UnderspecifiedSurface ?TWO2 ?SHELF5 ) ) ) ) ) ) ) ) )

e2c("I see two books sitting on a shelf").

[[txt, 'I'], [tag, staart, ppss, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, see], [tag, z, vb]]
[[txt, two], [tag, z, cd, 'CountNoun', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, books], [tag, z, nns, 'CountNoun', 'ProperCountNoun', 'ProperNoun']]
[[txt, sitting], [tag, z, vbg, 'GerundiveCountNoun', 'GerundiveNoun', 'MassNoun-Generic', 'Adjective']]
[[txt, on], [tag, z, in, 'Adverb', 'Preposition', 'Preposition-Directional-Telic', 'Preposition-Locative', 'VerbParticle', 'WHAdverb']]
[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, shelf], [tag, laast, nn, 'CountNoun']]

seg([p('ADVP_non_cyclic', 1, 1), p('VP_non_cyclic', 2, 2), p('QP', 3, 4), p('VP_non_cyclic', 5, 5), p('PP_non_cyclic', 6, 6), p('QP', 7, 8)])

(thereExists ?SPEAKER 
  (and 
    (isa ?SPEAKER Person ) 
    (and 
      (isa ?SEE3 Event ) 
      (thereExistExactly 2 ?TWO4 
        (and 
          (and 
            (isa ?TWO4 BookCopy ) 
            (isa ?TWO4 SittingDown ) ) 
          (and 
            (or 
              (awareOf ?SPEAKER ?TWO4 ) 
              (and 
                (isa ?SEE3 VisualPerception ) 
                (performedBy ?SEE3 ?SPEAKER ) 
                (perceivedThings ?SEE3 ?TWO4 ) ) ) 
            (thereExists ?SHELF11 
              (and 
                (isa ?SHELF11 ShelfInABuilding ) 
                (on-UnderspecifiedSurface ?TWO4 ?SHELF11 ) ) ) ) ) ) ) ) )

e2c("I can see you").

[[txt, 'I'], [tag, staart, ppss, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, can], [tag, z, md, 'Modal', 'CountNoun']]
[[txt, see], [tag, z, vb]]
[[txt, you], [tag, laast, ppss, ppo, prp, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]

seg([p('ADVP_non_cyclic', 1, 1), p('VP_non_cyclic', 2, 2), p('VP_non_cyclic', 3, 3), p('ADVP_non_cyclic', 4, 4)])

(thereExists ?SPEAKER 
  (and 
    (isa ?SPEAKER Person ) 
    (and 
      (behavourCapable ?SPEAKER ?SEE4 ) 
      (and 
        (isa ?SEE4 Event ) 
        (thereExists ?TARGETAGENT 
          (and 
            (isa ?TARGETAGENT Person ) 
            (or 
              (awareOf ?SPEAKER ?TARGETAGENT ) 
              (and 
                (isa ?SEE4 VisualPerception ) 
                (performedBy ?SEE4 ?SPEAKER ) 
                (perceivedThings ?SEE4 ?TARGETAGENT ) ) ) ) ) ) ) ) )

e2c("Fido is a dog").

[[txt, 'Fido'], [tag, staart]]
[[txt, is], [tag, z, bez, vbz, 'BeAux']]
[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, dog], [tag, laast, nn, 'CountNoun']]


(implies 
  (properNameString ?FIDO3 "Fido" ) 
  (thereExists ?DOG8 
    (and 
      (and 
        (isa ?DOG8 InsultingSomeone ) 
        (subjectOfInfo ?DOG8 :POSSESSOR ) ) 
      (and 
        (isa ?IS1 Living ) 
        (occursDuring ?IS1 Now ) 
        (preActors ?IS1 ?FIDO3 ) 
        (actors ?IS1 ?DOG8 ) ) ) ) )

e2c("Who is the president of the United States of America ?").

[[txt, 'Who'], [tag, staart, nnp, prp, wp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, is], [tag, z, bez, vbz, 'BeAux']]
[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, president], [tag, z, nn, 'CountNoun', 'ProperCountNoun', 'ProperNoun', 'Adjective']]
[[txt, of], [tag, z, in, 'Preposition', 'Preposition-Of']]
[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, 'United', 'States', of, 'America'], [tag, z]]
[[txt, ?], [tag, laast, ?, 'Punctuation-SP']]


(CYC-QUERY 
  (thereExists ?Who 
    (thereExists ?PRESIDENT46 
      (and 
        (and 
          (and 
            (isa ?PRESIDENT46 Thing ) 
            (isa ?PRESIDENT46 Thing ) ) 
          (isa ?PRESIDENT46 
            (OneOfFn PresidentOfOrganization 
              (SubcollectionOfWithRelationFromTypeFn Person president Organization ) ) ) ) 
        (and 
          (and 
            (isa ?IS10 Living ) 
            (occursDuring ?IS10 Now ) 
            (preActors ?IS10 ?Who ) 
            (actors ?IS10 ?PRESIDENT46 ) ) 
          (thereExists ?G300312 
            (and 
              (eq ?G300312 UnitedStatesOfAmerica ) 
              (possessiveRelation ?G300312 ?PRESIDENT46 ) ) ) ) ) ) ) )

e2c("I saw him").

[[txt, 'I'], [tag, staart, ppss, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, saw], [tag, z, vbd, 'CountNoun']]
[[txt, him], [tag, laast, ppo, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]

seg([p('ADVP_non_cyclic', 1, 1), p('VP_non_cyclic', 2, 2), p('ADVP_non_cyclic', 3, 3)])

(thereExists ?SPEAKER 
  (and 
    (isa ?SPEAKER Person ) 
    (and 
      (isa ?SAW1 Event ) 
      (thereExists ?HIM 
        (and 
          (equals ?HIM 
            (PronounFn ThirdPerson-NLAttr Singular-NLAttr Masculine-NLAttr ObjectPronoun ) ) 
          (or 
            (awareOf ?SPEAKER ?HIM ) 
            (and 
              (isa ?SAW1 SawingSomething ) 
              (objectOfStateChange ?SAW1 ?HIM ) 
              (doneBy ?SAW1 ?SPEAKER ) ) 
            (and 
              (isa ?SAW1 VisualPerception ) 
              (performedBy ?SAW1 ?SPEAKER ) 
              (perceivedThings ?SAW1 ?HIM ) ) ) ) ) ) ) )

e2c("I saw him Monday").

[[txt, 'I'], [tag, staart, ppss, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, saw], [tag, z, vbd, 'CountNoun']]
[[txt, him], [tag, z, ppo, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, 'Monday'], [tag, laast, nnp, nr, 'CountNoun', 'ProperCountNoun', 'ProperNoun']]

seg([p('ADVP_non_cyclic', 1, 1), p('VP_non_cyclic', 2, 2), p('ADVP_non_cyclic', 3, 3), p('VP_non_cyclic', 4, 4)])

(thereExists ?SPEAKER 
  (and 
    (isa ?SPEAKER Person ) 
    (implies 
      (occursDuring ?SAW2 Monday ) 
      (holdsIn ?SAW2 
        (and 
          (isa ?SAW2 Event ) 
          (thereExists ?HIM 
            (and 
              (equals ?HIM 
                (PronounFn ThirdPerson-NLAttr Singular-NLAttr Masculine-NLAttr ObjectPronoun ) ) 
              (or 
                (awareOf ?SPEAKER ?HIM ) 
                (and 
                  (isa ?SAW2 SawingSomething ) 
                  (objectOfStateChange ?SAW2 ?HIM ) 
                  (doneBy ?SAW2 ?SPEAKER ) ) 
                (and 
                  (isa ?SAW2 VisualPerception ) 
                  (performedBy ?SAW2 ?SPEAKER ) 
                  (perceivedThings ?SAW2 ?HIM ) ) ) ) ) ) ) ) ) )

e2c("I saw him January").

[[txt, 'I'], [tag, staart, ppss, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, saw], [tag, z, vbd, 'CountNoun']]
[[txt, him], [tag, z, ppo, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, 'January'], [tag, laast, nnp, np, 'ProperCountNoun', 'ProperNoun']]

seg([p('ADVP_non_cyclic', 1, 1), p('VP_non_cyclic', 2, 2), p('ADVP_non_cyclic', 3, 3), p('VP_non_cyclic', 4, 4)])

(thereExists ?SPEAKER 
  (and 
    (isa ?SPEAKER Person ) 
    (implies 
      (occursDuring ?SAW3 January ) 
      (holdsIn ?SAW3 
        (and 
          (isa ?SAW3 Event ) 
          (thereExists ?HIM 
            (and 
              (equals ?HIM 
                (PronounFn ThirdPerson-NLAttr Singular-NLAttr Masculine-NLAttr ObjectPronoun ) ) 
              (or 
                (awareOf ?SPEAKER ?HIM ) 
                (and 
                  (isa ?SAW3 SawingSomething ) 
                  (objectOfStateChange ?SAW3 ?HIM ) 
                  (doneBy ?SAW3 ?SPEAKER ) ) 
                (and 
                  (isa ?SAW3 VisualPerception ) 
                  (performedBy ?SAW3 ?SPEAKER ) 
                  (perceivedThings ?SAW3 ?HIM ) ) ) ) ) ) ) ) ) )

e2c("I saw him January twenty first").

[[txt, 'I'], [tag, staart, ppss, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, saw], [tag, z, vbd, 'CountNoun']]
[[txt, him], [tag, z, ppo, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, 'January'], [tag, z, nnp, np, 'ProperCountNoun', 'ProperNoun']]
[[txt, twenty], [tag, z, cd, 'CountNoun', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, first], [tag, laast, jj, od, rb, 'Adjective', 'Adverb', 'CountNoun', 'NongradableAdjective', 'OrdinalAdjective', 'WHAdverb']]

seg([p('ADVP_non_cyclic', 1, 1), p('VP_non_cyclic', 2, 2), p('ADVP_non_cyclic', 3, 3), p('VP_non_cyclic', 4, 4), p('QP', 5, 5), p('PP_non_cyclic', 6, 6)])

e2c("Monday ' s concert should be good").

[[txt, 'Monday\'s'], [txt, 'Monday', '\'s'], [txt, 'Monday'], [tag, staart, '\'s', 'nr$']]
[[txt, concert], [tag, z, nn, 'CountNoun']]
[[txt, should], [tag, z, md, 'Modal']]
[[txt, be], [tag, z, be, vb, 'BeAux']]
[[txt, good], [tag, laast, jj, 'Adjective']]


e2c("January 21 , I saw him").

[[txt, 'January'], [tag, staart, nnp, np, 'ProperCountNoun', 'ProperNoun']]
[[txt, 21], [tag, z, cd]]
[[txt, (',')], [tag, z, (','), 'Punctuation-SP']]
[[txt, 'I'], [tag, z, ppss, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, saw], [tag, z, vbd, 'CountNoun']]
[[txt, him], [tag, laast, ppo, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]


e2c("This Monday ' s concert should be good").

[[txt, 'This'], [tag, staart, dt, 'Adverb', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHAdverb', 'WHDeterminer', 'WHPronoun']]
[[txt, 'Monday\'s'], [txt, 'Monday', '\'s'], [txt, 'Monday'], [tag, z, '\'s', 'nr$']]
[[txt, concert], [tag, z, nn, 'CountNoun']]
[[txt, should], [tag, z, md, 'Modal']]
[[txt, be], [tag, z, be, vb, 'BeAux']]
[[txt, good], [tag, laast, jj, 'Adjective']]


e2c("This week ' s concert should be good").

[[txt, 'This'], [tag, staart, dt, 'Adverb', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHAdverb', 'WHDeterminer', 'WHPronoun']]
[[txt, 'week\'s'], [txt, week, '\'s'], [txt, week], [tag, z, '\'s', 'nn$']]
[[txt, concert], [tag, z, nn, 'CountNoun']]
[[txt, should], [tag, z, md, 'Modal']]
[[txt, be], [tag, z, be, vb, 'BeAux']]
[[txt, good], [tag, laast, jj, 'Adjective']]


e2c("The Monday concert should be good").

[[txt, a], [tag, staart, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, 'Monday'], [tag, z, nnp, nr, 'CountNoun', 'ProperCountNoun', 'ProperNoun']]
[[txt, concert], [tag, z, nn, 'CountNoun']]
[[txt, should], [tag, z, md, 'Modal']]
[[txt, be], [tag, z, be, vb, 'BeAux']]
[[txt, good], [tag, laast, jj, 'Adjective']]

seg([p('QP', 1, 1), p('VP_non_cyclic', 2, 2), p('VP_non_cyclic', 3, 3), p('VP_non_cyclic', 4, 4), p('VP_non_cyclic', 5, 5), p('PP_non_cyclic', 6, 6)])

e2c("We did it on Jan 21").

[[txt, 'We'], [tag, staart, prp, ppss, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, did], [tag, z, dod, vbd, 'DoAux']]
[[txt, it], [tag, z, prp, pps, ppo, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, on], [tag, z, in, 'Adverb', 'Preposition', 'Preposition-Directional-Telic', 'Preposition-Locative', 'VerbParticle', 'WHAdverb']]
[[txt, 'Jan'], [tag, z, nnp, np]]
[[txt, 21], [tag, laast, cd]]

seg([p('ADVP_non_cyclic', 1, 1), p('VP_non_cyclic', 2, 2), p('ADVP_non_cyclic', 3, 3), p('PP_non_cyclic', 4, 4), p('VP_non_cyclic', 5, 5), p('QP', 6, 6)])

e2c("We did it in Jan").

[[txt, 'We'], [tag, staart, prp, ppss, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, did], [tag, z, dod, vbd, 'DoAux']]
[[txt, it], [tag, z, prp, pps, ppo, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, in], [tag, z, in, 'Adjective', 'Adverb', 'CountNoun', 'Preposition', 'Preposition-Directional-Telic', 'Preposition-Locative', 'VerbParticle', 'WHAdverb']]
[[txt, 'Jan'], [tag, laast, nnp, np]]

seg([p('ADVP_non_cyclic', 1, 1), p('VP_non_cyclic', 2, 2), p('ADVP_non_cyclic', 3, 3), p('PP_non_cyclic', 4, 4), p('VP_non_cyclic', 5, 5)])

(thereExists ?WE 
  (and 
    (equals ?WE 
      (PronounFn FirstPerson-NLAttr Plural-NLAttr Ungendered-NLAttr SubjectPronoun ) ) 
    (and 
      (and 
        (occursDurring ?IN3 ?G431374 ) 
        (bodilyDoer ?WE ?IN3 ) ) 
      (implies 
        (properNameString ?JAN68 "Jan" ) 
        (and 
          (occursDuring ?IN3 Now ) 
          (holdsIn ?IN3 
            (in-UnderspecifiedContainer ?WE ?JAN68 ) ) ) ) ) ) )

e2c("I saw him on early January 21").

[[txt, 'I'], [tag, staart, ppss, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, saw], [tag, z, vbd, 'CountNoun']]
[[txt, him], [tag, z, ppo, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, on], [tag, z, in, 'Adverb', 'Preposition', 'Preposition-Directional-Telic', 'Preposition-Locative', 'VerbParticle', 'WHAdverb']]
[[txt, early], [tag, z, jj, rb, 'Adjective', 'Adverb', 'WHAdverb']]
[[txt, 'January'], [tag, z, nnp, np, 'ProperCountNoun', 'ProperNoun']]
[[txt, 21], [tag, laast, cd]]

seg([p('ADVP_non_cyclic', 1, 1), p('VP_non_cyclic', 2, 2), p('ADVP_non_cyclic', 3, 3), p('PP_non_cyclic', 4, 4), p('PP_non_cyclic', 5, 5), p('VP_non_cyclic', 6, 6), p('QP', 7, 7)])

e2c("The this week concert should be good").

[[txt, a], [tag, staart, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, this], [tag, z, dt, 'Adverb', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Definite', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHAdverb', 'WHDeterminer', 'WHPronoun']]
[[txt, week], [tag, z, nn, 'CountNoun']]
[[txt, concert], [tag, z, nn, 'CountNoun']]
[[txt, should], [tag, z, md, 'Modal']]
[[txt, be], [tag, z, be, vb, 'BeAux']]
[[txt, good], [tag, laast, jj, 'Adjective']]

seg([p('QP', 1, 3), p('VP_non_cyclic', 4, 4), p('VP_non_cyclic', 5, 5), p('VP_non_cyclic', 6, 6), p('PP_non_cyclic', 7, 7)])

e2c("I saw him in January 1990").

[[txt, 'I'], [tag, staart, ppss, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, saw], [tag, z, vbd, 'CountNoun']]
[[txt, him], [tag, z, ppo, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, in], [tag, z, in, 'Adjective', 'Adverb', 'CountNoun', 'Preposition', 'Preposition-Directional-Telic', 'Preposition-Locative', 'VerbParticle', 'WHAdverb']]
[[txt, 'January'], [tag, z, nnp, np, 'ProperCountNoun', 'ProperNoun']]
[[txt, 1990], [tag, laast, cd]]

seg([p('ADVP_non_cyclic', 1, 1), p('VP_non_cyclic', 2, 2), p('ADVP_non_cyclic', 3, 3), p('PP_non_cyclic', 4, 4), p('VP_non_cyclic', 5, 5), p('QP', 6, 6)])

e2c("The fact that he smiled at me gives me hope").

[[txt, a], [tag, staart, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, fact], [tag, z, nn, 'CountNoun']]
[[txt, that], [tag, z, in, cs, dt, wdt, 'Adverb', 'Complementizer', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Definite', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHAdverb', 'WHDeterminer', 'WHPronoun']]
[[txt, he], [tag, z, pps, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, smiled], [tag, z, vbd, 'Adjective']]
[[txt, at], [tag, z, in, 'Preposition']]
[[txt, me], [tag, z, ppo, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, gives], [tag, z, vbz]]
[[txt, me], [tag, z, ppo, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, hope], [tag, laast, nn, vb, vbp, 'CountNoun', 'MassNoun', 'MassNoun-Generic']]

seg([p('QP', 1, 2), p('PP_non_cyclic', 3, 3), p('ADVP_non_cyclic', 4, 4), p('VP_non_cyclic', 5, 5), p('PP_non_cyclic', 6, 6), p('ADVP_non_cyclic', 7, 7), p('VP_non_cyclic', 8, 8), p('ADVP_non_cyclic', 9, 9), p('VP_non_cyclic', 10, 10)])

e2c("The event that he smiled at me gives me hope").

[[txt, a], [tag, staart, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, event], [tag, z, nn, 'CountNoun']]
[[txt, that], [tag, z, in, cs, dt, wdt, 'Adverb', 'Complementizer', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Definite', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHAdverb', 'WHDeterminer', 'WHPronoun']]
[[txt, he], [tag, z, pps, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, smiled], [tag, z, vbd, 'Adjective']]
[[txt, at], [tag, z, in, 'Preposition']]
[[txt, me], [tag, z, ppo, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, gives], [tag, z, vbz]]
[[txt, me], [tag, z, ppo, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, hope], [tag, laast, nn, vb, vbp, 'CountNoun', 'MassNoun', 'MassNoun-Generic']]

seg([p('QP', 1, 2), p('PP_non_cyclic', 3, 3), p('ADVP_non_cyclic', 4, 4), p('VP_non_cyclic', 5, 5), p('PP_non_cyclic', 6, 6), p('ADVP_non_cyclic', 7, 7), p('VP_non_cyclic', 8, 8), p('ADVP_non_cyclic', 9, 9), p('VP_non_cyclic', 10, 10)])

e2c("But my efforts to win his heart have failed").

[[txt, 'But'], [tag, staart, cc]]
[[txt, my], [tag, z, 'pp$', 'prp$', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'PossessivePronoun-Pre', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, efforts], [tag, z, nns, 'CountNoun']]
[[txt, to], [tag, z, to, in, 'InfinitiveComp', 'Preposition', 'Preposition-Directional']]
[[txt, win], [tag, z, vb, 'CountNoun']]
[[txt, his], [tag, z, 'pp$', 'prp$', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'PossessivePronoun-Pre', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, heart], [tag, z, nn, 'CountNoun']]
[[txt, have], [tag, z, hv, vbp, vb, 'HaveAux']]
[[txt, failed], [tag, laast, vbd, vbn, 'Adjective']]

seg([p('ADVP_non_cyclic', 1, 1), p('NX', 2, 3), p('PP_non_cyclic', 4, 4), p('VP_non_cyclic', 5, 5), p('NP_non_cyclic', 6, 7), p('VP_non_cyclic', 8, 8), p('VP_non_cyclic', 9, 9)])

e2c("But my presents to win his heart have failed").

[[txt, 'But'], [tag, staart, cc]]
[[txt, my], [tag, z, 'pp$', 'prp$', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'PossessivePronoun-Pre', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, presents], [tag, z, vbz, nns, 'CountNoun']]
[[txt, to], [tag, z, to, in, 'InfinitiveComp', 'Preposition', 'Preposition-Directional']]
[[txt, win], [tag, z, vb, 'CountNoun']]
[[txt, his], [tag, z, 'pp$', 'prp$', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'PossessivePronoun-Pre', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, heart], [tag, z, nn, 'CountNoun']]
[[txt, have], [tag, z, hv, vbp, vb, 'HaveAux']]
[[txt, failed], [tag, laast, vbd, vbn, 'Adjective']]

seg([p('ADVP_non_cyclic', 1, 1), p('NX', 2, 3), p('PP_non_cyclic', 4, 4), p('VP_non_cyclic', 5, 5), p('NP_non_cyclic', 6, 7), p('VP_non_cyclic', 8, 8), p('VP_non_cyclic', 9, 9)])

e2c("Failure to comply may result in dismissal").

[[txt, 'Failure'], [tag, staart, nn, 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, to], [tag, z, to, in, 'InfinitiveComp', 'Preposition', 'Preposition-Directional']]
[[txt, comply], [tag, z, vb, 'Adjective', 'Adverb', 'WHAdverb']]
[[txt, may], [tag, z, md, 'Modal', 'ProperCountNoun', 'ProperNoun']]
[[txt, result], [tag, z, nn, vb, 'CountNoun']]
[[txt, in], [tag, z, in, 'Adjective', 'Adverb', 'CountNoun', 'Preposition', 'Preposition-Directional-Telic', 'Preposition-Locative', 'VerbParticle', 'WHAdverb']]
[[txt, dismissal], [tag, laast, nn, 'CountNoun', 'Adjective']]

seg([p('VP_non_cyclic', 1, 1), p('PP_non_cyclic', 2, 2), p('VP_non_cyclic', 3, 3), p('VP_non_cyclic', 4, 4), p('VP_non_cyclic', 5, 5), p('PP_non_cyclic', 6, 6), p('VP_non_cyclic', 7, 7)])

(implies 
  (properNameString ?FAILURE3 "Failure" ) 
  (and 
    (and 
      (isa ?RESULT3 
        (AdverbFn Comply-TheWord ) ) 
      (and 
        (behavourCapable ?FAILURE3 ?RESULT3 ) 
        (implies 
          (and 
            (isa ?DISMISSAL9 
              (NounFn Dismiss-TheWord ) ) 
            (agentPopularity ?DISMISSAL9 
              (HighAmountFn PopularityLevel ) ) ) 
          (and 
            (occursDuring ?RESULT3 Now ) 
            (holdsIn ?RESULT3 
              (eventOutcomes ?FAILURE3 ?DISMISSAL9 ) ) ) ) ) ) 
    (implies 
      (and 
        (isa ?G461366 Thing ) 
        (isa ?G461366 Thing ) ) 
      (to-UnderspecifiedLocation ?FAILURE3 ?G461366 ) ) ) )

e2c("Absence to comply may result in dismissal").

[[txt, 'Absence'], [tag, staart, 'CountNoun', 'CountNoun-Generic', 'NLWordForm', 'Noun']]
[[txt, to], [tag, z, to, in, 'InfinitiveComp', 'Preposition', 'Preposition-Directional']]
[[txt, comply], [tag, z, vb, 'Adjective', 'Adverb', 'WHAdverb']]
[[txt, may], [tag, z, md, 'Modal', 'ProperCountNoun', 'ProperNoun']]
[[txt, result], [tag, z, nn, vb, 'CountNoun']]
[[txt, in], [tag, z, in, 'Adjective', 'Adverb', 'CountNoun', 'Preposition', 'Preposition-Directional-Telic', 'Preposition-Locative', 'VerbParticle', 'WHAdverb']]
[[txt, dismissal], [tag, laast, nn, 'CountNoun', 'Adjective']]


(implies 
  (properNameString ?ABSENCE3 "Absence" ) 
  (and 
    (and 
      (isa ?RESULT7 
        (AdverbFn Comply-TheWord ) ) 
      (and 
        (behavourCapable ?ABSENCE3 ?RESULT7 ) 
        (implies 
          (and 
            (isa ?DISMISSAL18 
              (NounFn Dismiss-TheWord ) ) 
            (agentPopularity ?DISMISSAL18 
              (HighAmountFn PopularityLevel ) ) ) 
          (and 
            (occursDuring ?RESULT7 Now ) 
            (holdsIn ?RESULT7 
              (eventOutcomes ?ABSENCE3 ?DISMISSAL18 ) ) ) ) ) ) 
    (implies 
      (and 
        (isa ?G495123 Thing ) 
        (isa ?G495123 Thing ) ) 
      (to-UnderspecifiedLocation ?ABSENCE3 ?G495123 ) ) ) )

e2c("The question is who we should invite").

[[txt, a], [tag, staart, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, question], [tag, z, nn, 'CountNoun']]
[[txt, is], [tag, z, bez, vbz, 'BeAux']]
[[txt, who], [tag, z, wps, wp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun', 'WHPronoun-Subject']]
[[txt, we], [tag, z, ppss, prp, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, should], [tag, z, md, 'Modal']]
[[txt, invite], [tag, laast, vb]]

seg([p('QP', 1, 2), p('VP_non_cyclic', 3, 3), p('X', 4, 4), p('ADVP_non_cyclic', 5, 5), p('VP_non_cyclic', 6, 6), p('VP_non_cyclic', 7, 7)])

e2c("The party is who we should invite").

[[txt, a], [tag, staart, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, party], [tag, z, nn, 'CountNoun', 'Adjective']]
[[txt, is], [tag, z, bez, vbz, 'BeAux']]
[[txt, who], [tag, z, wps, wp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun', 'WHPronoun-Subject']]
[[txt, we], [tag, z, ppss, prp, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, should], [tag, z, md, 'Modal']]
[[txt, invite], [tag, laast, vb]]

seg([p('QP', 1, 2), p('VP_non_cyclic', 3, 3), p('X', 4, 4), p('ADVP_non_cyclic', 5, 5), p('VP_non_cyclic', 6, 6), p('VP_non_cyclic', 7, 7)])

e2c("The big question on everybody ' s mind is who killed OJ").

[[txt, a], [tag, staart, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, big], [tag, z, jj, 'Adjective']]
[[txt, question], [tag, z, nn, 'CountNoun']]
[[txt, on], [tag, z, in, 'Adverb', 'Preposition', 'Preposition-Directional-Telic', 'Preposition-Locative', 'VerbParticle', 'WHAdverb']]
[[txt, 'everybody\'s'], [txt, everybody, '\'s'], [txt, everybody], [tag, z, '\'s', 'pn$']]
[[txt, mind], [tag, z, nn, vb, 'CountNoun']]
[[txt, is], [tag, z, bez, vbz, 'BeAux']]
[[txt, who], [tag, z, wps, wp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun', 'WHPronoun-Subject']]
[[txt, killed], [tag, z, vbn, vbd, 'Adjective']]
[[txt, 'OJ'], [tag, laast]]


e2c("The big mind on everybody ' s question is who killed OJ").

[[txt, a], [tag, staart, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, big], [tag, z, jj, 'Adjective']]
[[txt, mind], [tag, z, nn, vb, 'CountNoun']]
[[txt, on], [tag, z, in, 'Adverb', 'Preposition', 'Preposition-Directional-Telic', 'Preposition-Locative', 'VerbParticle', 'WHAdverb']]
[[txt, 'everybody\'s'], [txt, everybody, '\'s'], [txt, everybody], [tag, z, '\'s', 'pn$']]
[[txt, question], [tag, z, nn, 'CountNoun']]
[[txt, is], [tag, z, bez, vbz, 'BeAux']]
[[txt, who], [tag, z, wps, wp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun', 'WHPronoun-Subject']]
[[txt, killed], [tag, z, vbn, vbd, 'Adjective']]
[[txt, 'OJ'], [tag, laast]]


e2c("Do it the way you ' ve always done it").

[[txt, 'Do'], [tag, staart, nnp, vb, vbp]]
[[txt, it], [tag, z, prp, pps, ppo, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, way], [tag, z, nn, 'CountNoun']]
[[txt, 'you\'ve'], [tag, z, 'ppss+hv']]
[[txt, always], [tag, z, rb, 'Adverb', 'ProperCountNoun', 'ProperNoun', 'WHAdverb']]
[[txt, done], [tag, z, vbn, 'DoAux', 'Adjective']]
[[txt, it], [tag, laast, prp, pps, ppo, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]


e2c("I really like the way you do your hair").

[[txt, 'I'], [tag, staart, ppss, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, really], [tag, z, rb, ql, 'Adverb', 'WHAdverb', 'CountNoun']]
[[txt, like], [tag, z, cs, in, vb, 'Adjective', 'Preposition', 'SubordinatingConjunction']]
[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, way], [tag, z, nn, 'CountNoun']]
[[txt, you], [tag, z, ppss, ppo, prp, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, do], [tag, z, do, vbp, vb, 'DoAux']]
[[txt, your], [tag, z, 'pp$', 'prp$', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'PossessivePronoun-Pre', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, hair], [tag, laast, nn, 'CountNoun', 'MassNoun', 'MassNoun-Generic']]

seg([p('ADVP_non_cyclic', 1, 1), p('PP_non_cyclic', 2, 2), p('PP_non_cyclic', 3, 3), p('QP', 4, 5), p('ADVP_non_cyclic', 6, 6), p('VP_non_cyclic', 7, 7), p('NP_non_cyclic', 8, 9)])

e2c("I really like the fashion you do your hair").

[[txt, 'I'], [tag, staart, ppss, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, really], [tag, z, rb, ql, 'Adverb', 'WHAdverb', 'CountNoun']]
[[txt, like], [tag, z, cs, in, vb, 'Adjective', 'Preposition', 'SubordinatingConjunction']]
[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, fashion], [tag, z, nn, 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, you], [tag, z, ppss, ppo, prp, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, do], [tag, z, do, vbp, vb, 'DoAux']]
[[txt, your], [tag, z, 'pp$', 'prp$', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'PossessivePronoun-Pre', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, hair], [tag, laast, nn, 'CountNoun', 'MassNoun', 'MassNoun-Generic']]

seg([p('ADVP_non_cyclic', 1, 1), p('PP_non_cyclic', 2, 2), p('PP_non_cyclic', 3, 3), p('QP', 4, 5), p('ADVP_non_cyclic', 6, 6), p('VP_non_cyclic', 7, 7), p('NP_non_cyclic', 8, 9)])

e2c("He made a request that there be an investigation").

[[txt, 'He'], [tag, staart, pps, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, made], [tag, z, vbd, vbn]]
[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, request], [tag, z, nn, 'CountNoun']]
[[txt, that], [tag, z, in, cs, dt, wdt, 'Adverb', 'Complementizer', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Definite', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHAdverb', 'WHDeterminer', 'WHPronoun']]
[[txt, there], [tag, z, ex, rb, 'Adverb', 'AdverbOfPlace', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'There-Existential', 'WHAdverb', 'WHPronoun']]
[[txt, be], [tag, z, be, vb, 'BeAux']]
[[txt, an], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer']]
[[txt, investigation], [tag, laast, nn, 'CountNoun', 'MassNoun', 'MassNoun-Generic']]


(thereExists ?HE 
  (and 
    (isa ?HE Male ) 
    (and 
      (isa ?MADE1 Event ) 
      (thereExists ?REQUEST8 
        (and 
          (and 
            (isa ?REQUEST8 
              (OneOfFn InformationRequest-IBT Request Requesting-CommunicationAct ) ) 
            (isa ?REQUEST8 Thing ) ) 
          (and 
            (or 
              (causes-Underspecified ?HE ?REQUEST8 ) 
              (createdBy ?REQUEST8 ?HE ) 
              (doneBy ?REQUEST8 ?HE ) 
              (and 
                (isa ?MADE1 MakingSomething ) 
                (performedBy ?MADE1 ?HE ) 
                (products ?MADE1 ?REQUEST8 ) ) ) 
            (and 
              (isa ?BE29 
                (AdverbFn There-TheWord ) ) 
              (thereExists ?INVESTIGATION7 
                (and 
                  (isa ?INVESTIGATION7 Research ) 
                  (and 
                    (isa ?BE29 Living ) 
                    (occursDuring ?BE29 Now ) 
                    (preActors ?BE29 ?REQUEST8 ) 
                    (actors ?BE29 ?INVESTIGATION7 ) ) ) ) ) ) ) ) ) ) )

e2c("He stated the fact that there be an investigation").

[[txt, 'He'], [tag, staart, pps, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, stated], [tag, z, vbn, vbd, 'Adjective']]
[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, fact], [tag, z, nn, 'CountNoun']]
[[txt, that], [tag, z, in, cs, dt, wdt, 'Adverb', 'Complementizer', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Definite', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHAdverb', 'WHDeterminer', 'WHPronoun']]
[[txt, there], [tag, z, ex, rb, 'Adverb', 'AdverbOfPlace', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'There-Existential', 'WHAdverb', 'WHPronoun']]
[[txt, be], [tag, z, be, vb, 'BeAux']]
[[txt, an], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer']]
[[txt, investigation], [tag, laast, nn, 'CountNoun', 'MassNoun', 'MassNoun-Generic']]


(thereExists ?HE 
  (and 
    (isa ?HE Male ) 
    (thereExists ?FACT10 
      (and 
        (ist :POSSESSOR ?FACT10 ) 
        (and 
          (implies 
            (isa ?STATED3 
              (VerbFn State-TheWord ) ) 
            (eventSOT ?STATED3 ?HE ?FACT10 Past ) ) 
          (and 
            (isa ?BE31 
              (AdverbFn There-TheWord ) ) 
            (thereExists ?INVESTIGATION15 
              (and 
                (isa ?INVESTIGATION15 Research ) 
                (and 
                  (isa ?BE31 Living ) 
                  (occursDuring ?BE31 Now ) 
                  (preActors ?BE31 ?FACT10 ) 
                  (actors ?BE31 ?INVESTIGATION15 ) ) ) ) ) ) ) ) ) )

e2c("He is the kind of person who would do that").

[[txt, 'He'], [tag, staart, pps, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, is], [tag, z, bez, vbz, 'BeAux']]
[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, kind], [tag, z, nn, 'Adjective', 'CountNoun']]
[[txt, of], [tag, z, in, 'Preposition', 'Preposition-Of']]
[[txt, person], [tag, z, nn]]
[[txt, who], [tag, z, wps, wp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun', 'WHPronoun-Subject']]
[[txt, would], [tag, z, md, 'Modal']]
[[txt, do], [tag, z, do, vbp, vb, 'DoAux']]
[[txt, that], [tag, laast, in, cs, dt, wdt, 'Adverb', 'Complementizer', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Definite', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHAdverb', 'WHDeterminer', 'WHPronoun']]


e2c("He is the character of person who would do that").

[[txt, 'He'], [tag, staart, pps, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, is], [tag, z, bez, vbz, 'BeAux']]
[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, character], [tag, z, nn, 'CountNoun']]
[[txt, of], [tag, z, in, 'Preposition', 'Preposition-Of']]
[[txt, person], [tag, z, nn]]
[[txt, who], [tag, z, wps, wp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun', 'WHPronoun-Subject']]
[[txt, would], [tag, z, md, 'Modal']]
[[txt, do], [tag, z, do, vbp, vb, 'DoAux']]
[[txt, that], [tag, laast, in, cs, dt, wdt, 'Adverb', 'Complementizer', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Definite', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHAdverb', 'WHDeterminer', 'WHPronoun']]


e2c("An income tax increase may be necessary").

[[txt, 'An'], [tag, staart, cc, dt, nnp, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Postdeterminer', 'WHDeterminer']]
[[txt, income], [tag, z, nn, 'MassNoun', 'MassNoun-Generic']]
[[txt, tax], [tag, z, nn, 'CountNoun']]
[[txt, increase], [tag, z, nn, vb, 'CountNoun']]
[[txt, may], [tag, z, md, 'Modal', 'ProperCountNoun', 'ProperNoun']]
[[txt, be], [tag, z, be, vb, 'BeAux']]
[[txt, necessary], [tag, laast, jj, 'Adjective', 'CountNoun']]

seg([p('ADVP_non_cyclic', 1, 1), p('PP_non_cyclic', 2, 3), p('VP_non_cyclic', 4, 4), p('VP_non_cyclic', 5, 5), p('VP_non_cyclic', 6, 6), p('PP_non_cyclic', 7, 7)])

e2c("A tax on income increase may be necessary").

[[txt, 'A'], [tag, staart, dt, fw, jj, ls, nn, nnp, nnps, nns, prp, vb, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, tax], [tag, z, nn, 'CountNoun']]
[[txt, on], [tag, z, in, 'Adverb', 'Preposition', 'Preposition-Directional-Telic', 'Preposition-Locative', 'VerbParticle', 'WHAdverb']]
[[txt, income], [tag, z, nn, 'MassNoun', 'MassNoun-Generic']]
[[txt, increase], [tag, z, nn, vb, 'CountNoun']]
[[txt, may], [tag, z, md, 'Modal', 'ProperCountNoun', 'ProperNoun']]
[[txt, be], [tag, z, be, vb, 'BeAux']]
[[txt, necessary], [tag, laast, jj, 'Adjective', 'CountNoun']]

seg([p('QP', 1, 2), p('PP_non_cyclic', 3, 3), p('PP_non_cyclic', 4, 5), p('VP_non_cyclic', 6, 6), p('VP_non_cyclic', 7, 7), p('PP_non_cyclic', 8, 8)])

e2c("Last week I saw a great movie").

[[txt, 'Last'], [tag, staart, jj, nnp, rb, vb, 'Adjective', 'Adverb', 'WHAdverb']]
[[txt, week], [tag, z, nn, 'CountNoun']]
[[txt, 'I'], [tag, z, ppss, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, saw], [tag, z, vbd, 'CountNoun']]
[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, great], [tag, z, jj]]
[[txt, movie], [tag, laast, nn, 'CountNoun']]

seg([p('PP_non_cyclic', 1, 1), p('VP_non_cyclic', 2, 2), p('ADVP_non_cyclic', 3, 3), p('VP_non_cyclic', 4, 4), p('QP', 5, 6), p('VP_non_cyclic', 7, 7)])

e2c("Last dog I saw a great movie").

[[txt, 'Last'], [tag, staart, jj, nnp, rb, vb, 'Adjective', 'Adverb', 'WHAdverb']]
[[txt, dog], [tag, z, nn, 'CountNoun']]
[[txt, 'I'], [tag, z, ppss, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, saw], [tag, z, vbd, 'CountNoun']]
[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, great], [tag, z, jj]]
[[txt, movie], [tag, laast, nn, 'CountNoun']]

seg([p('PP_non_cyclic', 1, 1), p('VP_non_cyclic', 2, 2), p('ADVP_non_cyclic', 3, 3), p('VP_non_cyclic', 4, 4), p('QP', 5, 6), p('VP_non_cyclic', 7, 7)])

e2c("Alfred Baird , man I know , has been described as good gardener").

[[txt, 'Alfred'], [tag, staart, np, nnp]]
[[txt, 'Baird'], [tag, z, nnp, np]]
[[txt, (',')], [tag, z, (','), 'Punctuation-SP']]
[[txt, man], [tag, z, nn, 'CountNoun']]
[[txt, 'I'], [tag, z, ppss, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, know], [tag, z, vb, vbp]]
[[txt, (',')], [tag, z, (','), 'Punctuation-SP']]
[[txt, has], [tag, z, vbz, hvz, 'HaveAux']]
[[txt, been], [tag, z, ben, vbn, 'BeAux']]
[[txt, described], [tag, z, vbn, vbd, 'Adjective']]
[[txt, as], [tag, z, cs, in, 'Preposition', 'SubordinatingConjunction']]
[[txt, good], [tag, z, jj, 'Adjective']]
[[txt, gardener], [tag, laast, nn, 'AgentiveNoun']]


e2c("A bunch of dogs are in the yard").

[[txt, 'A'], [tag, staart, dt, fw, jj, ls, nn, nnp, nnps, nns, prp, vb, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, bunch], [tag, z, nn, 'CountNoun']]
[[txt, of], [tag, z, in, 'Preposition', 'Preposition-Of']]
[[txt, dogs], [tag, z, nns, 'CountNoun']]
[[txt, are], [tag, z, vbp, ber, 'CountNoun', 'BeAux']]
[[txt, in], [tag, z, in, 'Adjective', 'Adverb', 'CountNoun', 'Preposition', 'Preposition-Directional-Telic', 'Preposition-Locative', 'VerbParticle', 'WHAdverb']]
[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, yard], [tag, laast, nn, 'CountNoun']]

seg([p('QP', 1, 2), p('PP_non_cyclic', 3, 3), p('QP', 4, 4), p('VP_non_cyclic', 5, 5), p('PP_non_cyclic', 6, 6), p('QP', 7, 8)])

e2c("A picture of dogs are in the yard").

[[txt, 'A'], [tag, staart, dt, fw, jj, ls, nn, nnp, nnps, nns, prp, vb, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, picture], [tag, z, nn, 'CountNoun']]
[[txt, of], [tag, z, in, 'Preposition', 'Preposition-Of']]
[[txt, dogs], [tag, z, nns, 'CountNoun']]
[[txt, are], [tag, z, vbp, ber, 'CountNoun', 'BeAux']]
[[txt, in], [tag, z, in, 'Adjective', 'Adverb', 'CountNoun', 'Preposition', 'Preposition-Directional-Telic', 'Preposition-Locative', 'VerbParticle', 'WHAdverb']]
[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, yard], [tag, laast, nn, 'CountNoun']]

seg([p('QP', 1, 2), p('PP_non_cyclic', 3, 3), p('QP', 4, 4), p('VP_non_cyclic', 5, 5), p('PP_non_cyclic', 6, 6), p('QP', 7, 8)])

e2c("Many people were angered by the hearings").

[[txt, 'Many'], [tag, staart, dt, jj, nnp, pdt, rb, 'Adverb', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHAdverb', 'WHDeterminer', 'WHPronoun', 'Adjective']]
[[txt, people], [tag, z, nns, 'CountNoun']]
[[txt, were], [tag, z, bed, vbd, 'BeAux']]
[[txt, angered], [tag, z, vbn, vbd, 'Adjective']]
[[txt, by], [tag, z, in, 'Adverb', 'Preposition', 'Preposition-Directional-Telic', 'WHAdverb', 'Adjective']]
[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, hearings], [tag, laast, nns, 'CountNoun', 'GerundiveCountNoun']]

seg([p('QP', 1, 1), p('QP', 2, 2), p('VP_non_cyclic', 3, 3), p('VP_non_cyclic', 4, 4), p('PP_non_cyclic', 5, 5), p('QP', 6, 6), p('QP', 7, 7)])

e2c("Many person were angered by the hearings").

[[txt, 'Many'], [tag, staart, dt, jj, nnp, pdt, rb, 'Adverb', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHAdverb', 'WHDeterminer', 'WHPronoun', 'Adjective']]
[[txt, person], [tag, z, nn]]
[[txt, were], [tag, z, bed, vbd, 'BeAux']]
[[txt, angered], [tag, z, vbn, vbd, 'Adjective']]
[[txt, by], [tag, z, in, 'Adverb', 'Preposition', 'Preposition-Directional-Telic', 'WHAdverb', 'Adjective']]
[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, hearings], [tag, laast, nns, 'CountNoun', 'GerundiveCountNoun']]

seg([p('QP', 1, 2), p('VP_non_cyclic', 3, 3), p('VP_non_cyclic', 4, 4), p('PP_non_cyclic', 5, 5), p('QP', 6, 6), p('QP', 7, 7)])

e2c("Many were angered by the hearings").

[[txt, 'Many'], [tag, staart, dt, jj, nnp, pdt, rb, 'Adverb', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHAdverb', 'WHDeterminer', 'WHPronoun', 'Adjective']]
[[txt, were], [tag, z, bed, vbd, 'BeAux']]
[[txt, angered], [tag, z, vbn, vbd, 'Adjective']]
[[txt, by], [tag, z, in, 'Adverb', 'Preposition', 'Preposition-Directional-Telic', 'WHAdverb', 'Adjective']]
[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, hearings], [tag, laast, nns, 'CountNoun', 'GerundiveCountNoun']]

seg([p('QP', 1, 1), p('VP_non_cyclic', 2, 2), p('VP_non_cyclic', 3, 3), p('PP_non_cyclic', 4, 4), p('QP', 5, 5), p('QP', 6, 6)])

(thereExists ?MANY 
  (and 
    (or 
      (and 
        (equals ?MANY Many-NLAttr ) 
        (isa ?MANY 
          (CollectionUnionFn Individual NLGenQuantAttribute ) ) ) 
      (and 
        (equals ?MANY Many-Quant ) 
        (isa ?MANY 
          (CollectionUnionFn Individual PositiveIntegerExtent ) ) ) 
      (and 
        (equals ?MANY many ) 
        (isa ?MANY 
          (CollectionUnionFn GeneralizedQuantifier-Conservative Individual ReflexiveBinaryPredicate TruthFunction ) ) ) ) 
    (and 
      (occursDurring ?ANGERED3 Past ) 
      (implies 
        (and 
          (isa ?G626264 Thing ) 
          (isa ?G626264 Thing ) ) 
        (and 
          (implies 
            (isa ?ANGERED3 
              (VerbFn Anger-TheWord ) ) 
            (eventSOT ?ANGERED3 ?MANY ?G626264 Past ) ) 
          (thereExists ?HEARINGS5 
            (and 
              (and 
                (isa ?HEARINGS5 Hearing ) 
                (objectActedOn ?HEARINGS5 :POSSESSOR ) ) 
              (by-Underspecified ?G626264 ?HEARINGS5 ) ) ) ) ) ) ) )

e2c("My many female friends were angered by the hearings").

[[txt, 'My'], [tag, staart, nn, nnp, 'prp$', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, many], [tag, z, jj, ap, 'Adverb', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHAdverb', 'WHDeterminer', 'WHPronoun', 'Adjective']]
[[txt, female], [tag, z, nn, jj, 'Adjective', 'CountNoun']]
[[txt, friends], [tag, z, nns, 'CountNoun']]
[[txt, were], [tag, z, bed, vbd, 'BeAux']]
[[txt, angered], [tag, z, vbn, vbd, 'Adjective']]
[[txt, by], [tag, z, in, 'Adverb', 'Preposition', 'Preposition-Directional-Telic', 'WHAdverb', 'Adjective']]
[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, hearings], [tag, laast, nns, 'CountNoun', 'GerundiveCountNoun']]

seg([p('VP_non_cyclic', 1, 1), p('PP_non_cyclic', 2, 2), p('VP_non_cyclic', 3, 3), p('QP', 4, 4), p('VP_non_cyclic', 5, 5), p('VP_non_cyclic', 6, 6), p('PP_non_cyclic', 7, 7), p('QP', 8, 8), p('QP', 9, 9)])

e2c("My some female friends were angered by the hearings").

[[txt, 'My'], [tag, staart, nn, nnp, 'prp$', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, some], [tag, z, dt, dti, 'Adverb', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Postdeterminer', 'WHAdverb', 'WHDeterminer']]
[[txt, female], [tag, z, nn, jj, 'Adjective', 'CountNoun']]
[[txt, friends], [tag, z, nns, 'CountNoun']]
[[txt, were], [tag, z, bed, vbd, 'BeAux']]
[[txt, angered], [tag, z, vbn, vbd, 'Adjective']]
[[txt, by], [tag, z, in, 'Adverb', 'Preposition', 'Preposition-Directional-Telic', 'WHAdverb', 'Adjective']]
[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, hearings], [tag, laast, nns, 'CountNoun', 'GerundiveCountNoun']]

seg([p('VP_non_cyclic', 1, 1), p('QP', 2, 3), p('QP', 4, 4), p('VP_non_cyclic', 5, 5), p('VP_non_cyclic', 6, 6), p('PP_non_cyclic', 7, 7), p('QP', 8, 8), p('QP', 9, 9)])

e2c("Many who initially supported Thomas later changed their minds").

[[txt, 'Many'], [tag, staart, dt, jj, nnp, pdt, rb, 'Adverb', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHAdverb', 'WHDeterminer', 'WHPronoun', 'Adjective']]
[[txt, who], [tag, z, wps, wp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun', 'WHPronoun-Subject']]
[[txt, initially], [tag, z, rb, 'Adverb', 'WHAdverb', 'Adjective']]
[[txt, supported], [tag, z, vbn, vbd, 'Adjective']]
[[txt, 'Thomas'], [tag, z, np, nnp]]
[[txt, later], [tag, z, rbr, rb, 'Adjective', 'Adverb', 'AgentiveNoun', 'AdverbOfTime', 'WHAdverb']]
[[txt, changed], [tag, z, vbn, vbd, 'Adjective', 'CountNoun']]
[[txt, their], [tag, z, 'pp$', 'prp$', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'PossessivePronoun-Pre', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, minds], [tag, laast, nns, 'CountNoun']]

seg([p('QP', 1, 1), p('X', 2, 2), p('PP_non_cyclic', 3, 3), p('VP_non_cyclic', 4, 4), p('VP_non_cyclic', 5, 5), p('QP', 6, 6), p('VP_non_cyclic', 7, 7), p('NX', 8, 9)])

(thereExists ?MANY 
  (and 
    (or 
      (and 
        (equals ?MANY Many-NLAttr ) 
        (isa ?MANY 
          (CollectionUnionFn Individual NLGenQuantAttribute ) ) ) 
      (and 
        (equals ?MANY Many-Quant ) 
        (isa ?MANY 
          (CollectionUnionFn Individual PositiveIntegerExtent ) ) ) 
      (and 
        (equals ?MANY many ) 
        (isa ?MANY 
          (CollectionUnionFn GeneralizedQuantifier-Conservative Individual ReflexiveBinaryPredicate TruthFunction ) ) ) ) 
    (implies 
      (and 
        (or 
          (and 
            (equals ?MANY Agent-PartiallyTangible ) 
            (isa ?MANY 
              (CollectionUnionFn Collection ExistingObjectType StuffType TemporalStuffType ) ) ) ) 
        (and 
          (isa ?CHANGED1 Event ) 
          (and 
            (controls ?THEIR ?MINDS4 ) 
            (and 
              (equals ?THEIR 
                (PronounFn ThirdPerson-NLAttr Plural-NLAttr Ungendered-NLAttr PossessivePronoun-Pre ) ) 
              (implies 
                (and 
                  (isa ?MINDS4 TakingCareOfSomething ) 
                  (beneficiary ?MINDS4 :POSSESSOR ) ) 
                (or 
                  (and 
                    (isa ?CHANGED1 IntrinsicStateChangeEvent ) 
                    (performedBy ?CHANGED1 ?MANY ) 
                    (objectOfStateChange ?CHANGED1 ?MINDS4 ) ) 
                  (and 
                    (isa ?CHANGED1 ReplacingAnObject ) 
                    (objectActedOn ?CHANGED1 ?MINDS4 ) 
                    (doneBy ?CHANGED1 ?MANY ) ) ) ) ) ) ) ) 
      (and 
        (isa ?SUPPORTED1 
          (AdverbFn Initial-TheWord ) ) 
        (and 
          (isa ?SUPPORTED1 
            (AdverbFn Late-TheWord ) ) 
          (and 
            (isa ?SUPPORTED1 Event ) 
            (implies 
              (equals ?THOMAS2 JackThomas-911FOAF ) 
              (or 
                (satisfiesStandard ?MANY ?THOMAS2 ) 
                (and 
                  (isa ?SUPPORTED1 ShowingSupportForSomeone ) 
                  (beneficiary ?SUPPORTED1 ?THOMAS2 ) 
                  (performedBy ?SUPPORTED1 ?MANY ) ) 
                (and 
                  (isa ?SUPPORTED1 SupportingSomething ) 
                  (supportedObject ?SUPPORTED1 ?THOMAS2 ) 
                  (supportingObject ?SUPPORTED1 ?MANY ) ) ) ) ) ) ) ) ) )

e2c("The stupidity of the senators annoyed all my friends").

[[txt, a], [tag, staart, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, stupidity], [tag, z, nn, 'MassNoun', 'MassNoun-Generic']]
[[txt, of], [tag, z, in, 'Preposition', 'Preposition-Of']]
[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, senators], [tag, z, nns, 'AgentiveNoun']]
[[txt, annoyed], [tag, z, vbn, vbd, jj, 'Adjective']]
[[txt, all], [tag, z, abn, dt, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'PostQuant-SP', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, my], [tag, z, 'pp$', 'prp$', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'PossessivePronoun-Pre', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, friends], [tag, laast, nns, 'CountNoun']]

seg([p('QP', 1, 2), p('PP_non_cyclic', 3, 3), p('QP', 4, 4), p('QP', 5, 5), p('VP_non_cyclic', 6, 6), p('QP', 7, 7), p('NX', 8, 9)])

e2c("The stupidity of the senators annoyed many my friends").

[[txt, a], [tag, staart, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, stupidity], [tag, z, nn, 'MassNoun', 'MassNoun-Generic']]
[[txt, of], [tag, z, in, 'Preposition', 'Preposition-Of']]
[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, senators], [tag, z, nns, 'AgentiveNoun']]
[[txt, annoyed], [tag, z, vbn, vbd, jj, 'Adjective']]
[[txt, many], [tag, z, jj, ap, 'Adverb', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHAdverb', 'WHDeterminer', 'WHPronoun', 'Adjective']]
[[txt, my], [tag, z, 'pp$', 'prp$', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'PossessivePronoun-Pre', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, friends], [tag, laast, nns, 'CountNoun']]

seg([p('QP', 1, 2), p('PP_non_cyclic', 3, 3), p('QP', 4, 4), p('QP', 5, 5), p('VP_non_cyclic', 6, 6), p('PP_non_cyclic', 7, 7), p('NX', 8, 9)])

e2c("I need to buy a present , but I want something inexpensive").

[[txt, 'I'], [tag, staart, ppss, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, need], [tag, z, vb, nn, vbp, 'CountNoun']]
[[txt, to], [tag, z, to, in, 'InfinitiveComp', 'Preposition', 'Preposition-Directional']]
[[txt, buy], [tag, z, vb, 'CountNoun']]
[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, present], [tag, z, jj, rb, vb, nn, 'Adjective', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, (',')], [tag, z, (','), 'Punctuation-SP']]
[[txt, but], [tag, z, cc, 'CoordinatingConjunction']]
[[txt, 'I'], [tag, z, ppss, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, want], [tag, z, vb, vbp, 'CountNoun']]
[[txt, something], [tag, z, pn, nn, 'QuantifyingIndexical']]
[[txt, inexpensive], [tag, laast, jj, 'Adjective']]


e2c("I need to buy a present , but I want a gift inexpensive").

[[txt, 'I'], [tag, staart, ppss, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, need], [tag, z, vb, nn, vbp, 'CountNoun']]
[[txt, to], [tag, z, to, in, 'InfinitiveComp', 'Preposition', 'Preposition-Directional']]
[[txt, buy], [tag, z, vb, 'CountNoun']]
[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, present], [tag, z, jj, rb, vb, nn, 'Adjective', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, (',')], [tag, z, (','), 'Punctuation-SP']]
[[txt, but], [tag, z, cc, 'CoordinatingConjunction']]
[[txt, 'I'], [tag, z, ppss, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, want], [tag, z, vb, vbp, 'CountNoun']]
[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, gift], [tag, z, nn, 'CountNoun']]
[[txt, inexpensive], [tag, laast, jj, 'Adjective']]


e2c("Anyone who thinks this will work is crazy").

[[txt, 'Anyone'], [tag, staart, nn, 'CountNoun']]
[[txt, who], [tag, z, wps, wp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun', 'WHPronoun-Subject']]
[[txt, thinks], [tag, z, vbz]]
[[txt, this], [tag, z, dt, 'Adverb', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Definite', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHAdverb', 'WHDeterminer', 'WHPronoun']]
[[txt, will], [tag, z, md, 'Modal', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, work], [tag, z, nn, vb, 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, is], [tag, z, bez, vbz, 'BeAux']]
[[txt, crazy], [tag, laast, jj, 'Adjective']]

seg([p('VP_non_cyclic', 1, 1), p('X', 2, 2), p('VP_non_cyclic', 3, 3), p('QP', 4, 4), p('VP_non_cyclic', 5, 5), p('VP_non_cyclic', 6, 6), p('VP_non_cyclic', 7, 7), p('PP_non_cyclic', 8, 8)])

e2c("Their program is better than ours").

[[txt, 'Their'], [tag, staart, nnp, 'prp$', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, program], [tag, z, nn, 'CountNoun']]
[[txt, is], [tag, z, bez, vbz, 'BeAux']]
[[txt, better], [tag, z, jjr, rbr, 'AgentiveNoun', 'CountNoun', 'Adjective', 'Adverb']]
[[txt, than], [tag, z, in, cs, 'Preposition', 'SubordinatingConjunction']]
[[txt, ours], [tag, laast, 'pp$$', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]


e2c("Those that want to come can come").

[[txt, 'Those'], [tag, staart, dt, nnp, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, that], [tag, z, in, cs, dt, wdt, 'Adverb', 'Complementizer', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Definite', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHAdverb', 'WHDeterminer', 'WHPronoun']]
[[txt, want], [tag, z, vb, vbp, 'CountNoun']]
[[txt, to], [tag, z, to, in, 'InfinitiveComp', 'Preposition', 'Preposition-Directional']]
[[txt, come], [tag, z, vb, vbn]]
[[txt, can], [tag, z, md, 'Modal', 'CountNoun']]
[[txt, come], [tag, laast, vb, vbn]]

seg([p('PP_non_cyclic', 1, 2), p('VP_non_cyclic', 3, 3), p('PP_non_cyclic', 4, 4), p('VP_non_cyclic', 5, 5), p('VP_non_cyclic', 6, 6), p('VP_non_cyclic', 7, 7)])

(thereExists ?THOSE 
  (and 
    (or 
      (and 
        (equals ?THOSE Backreference-ClassB-NLAttr ) 
        (isa ?THOSE 
          (CollectionUnionFn Backreference-NLAttrType Individual ) ) ) 
      (and 
        (equals ?THOSE Demonstrative-ClassB-NLAttr ) 
        (isa ?THOSE 
          (CollectionUnionFn Demonstrative-NLAttrType Individual ) ) ) ) 
    (and 
      (eventSOT ?EVENT88 ?THOSE ?OBJ88 ?TIME88 ) 
      (implies 
        (occursDuring ?WANT3 
          (OneOfFn ArrivingAtAPlace HavingAnOrgasm ) ) 
        (holdsIn ?WANT3 
          (implies 
            (and 
              (isa ?G738781 Thing ) 
              (isa ?G738781 Thing ) ) 
            (and 
              (implies 
                (isa ?WANT3 
                  (VerbFn Want-TheWord ) ) 
                (eventSOT ?WANT3 ?THOSE ?G738781 Now ) ) 
              (implies 
                (and 
                  (isa ?COME4 Emission ) 
                  (isa ?COME4 
                    (OneOfFn Buttocks Can CanningFood ) ) ) 
                (to-UnderspecifiedLocation ?G738781 ?COME4 ) ) ) ) ) ) ) ) )

e2c("I read everything I could about the subject").

[[txt, 'I'], [tag, staart, ppss, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, read], [tag, z, vb, vbn, vbd, 'Adjective', 'CountNoun']]
[[txt, everything], [tag, z, pn, nn, 'QuantifyingIndexical']]
[[txt, 'I'], [tag, z, ppss, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, could], [tag, z, md, 'Modal']]
[[txt, about], [tag, z, in, rb, 'Adjective', 'Adverb', 'Preposition', 'WHAdverb']]
[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, subject], [tag, laast, nn, jj, 'CountNoun', 'MassNoun', 'MassNoun-Generic']]

seg([p('ADVP_non_cyclic', 1, 1), p('VP_non_cyclic', 2, 2), p('VP_non_cyclic', 3, 3), p('ADVP_non_cyclic', 4, 4), p('VP_non_cyclic', 5, 5), p('PP_non_cyclic', 6, 6), p('QP', 7, 8)])

e2c("I read whatever I could about the subjetc").

[[txt, 'I'], [tag, staart, ppss, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, read], [tag, z, vb, vbn, vbd, 'Adjective', 'CountNoun']]
[[txt, whatever], [tag, z, wdt, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, 'I'], [tag, z, ppss, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, could], [tag, z, md, 'Modal']]
[[txt, about], [tag, z, in, rb, 'Adjective', 'Adverb', 'Preposition', 'WHAdverb']]
[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, subjetc], [tag, laast]]


e2c("I read several books I could about the subject").

[[txt, 'I'], [tag, staart, ppss, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, read], [tag, z, vb, vbn, vbd, 'Adjective', 'CountNoun']]
[[txt, several], [tag, z, jj, ap, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, books], [tag, z, nns, 'CountNoun', 'ProperCountNoun', 'ProperNoun']]
[[txt, 'I'], [tag, z, ppss, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun']]
[[txt, could], [tag, z, md, 'Modal']]
[[txt, about], [tag, z, in, rb, 'Adjective', 'Adverb', 'Preposition', 'WHAdverb']]
[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, subject], [tag, laast, nn, jj, 'CountNoun', 'MassNoun', 'MassNoun-Generic']]

seg([p('ADVP_non_cyclic', 1, 1), p('VP_non_cyclic', 2, 2), p('PP_non_cyclic', 3, 3), p('QP', 4, 4), p('ADVP_non_cyclic', 5, 5), p('VP_non_cyclic', 6, 6), p('PP_non_cyclic', 7, 7), p('QP', 8, 9)])

e2c("the best costumes got prizes").

[[txt, a], [tag, staart, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, best], [tag, z, jjt, jjs, 'CountNoun', 'Adjective', 'Adverb']]
[[txt, costumes], [tag, z, nns, 'CountNoun']]
[[txt, got], [tag, z, vbd, vbn]]
[[txt, prizes], [tag, laast, nns, 'CountNoun']]

seg([p('QP', 1, 1), p('ADVP_non_cyclic', 2, 2), p('QP', 3, 3), p('VP_non_cyclic', 4, 4), p('QP', 5, 5)])

(thereExists ?COSTUMES5 
  (and 
    (and 
      (isa ?COSTUMES5 Costume ) 
      (isa ?COSTUMES5 Thing ) ) 
    (implies 
      (isa ?PRIZES7 AwardPractice ) 
      (implies 
        (isa ?GOT7 
          (VerbFn Get-TheWord ) ) 
        (eventSOT ?GOT7 ?COSTUMES5 ?PRIZES7 Past ) ) ) ) )

e2c("a best costume got prizes").

[[txt, a], [tag, staart, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, best], [tag, z, jjt, jjs, 'CountNoun', 'Adjective', 'Adverb']]
[[txt, costume], [tag, z, nn, 'CountNoun']]
[[txt, got], [tag, z, vbd, vbn]]
[[txt, prizes], [tag, laast, nns, 'CountNoun']]

seg([p('QP', 1, 1), p('ADVP_non_cyclic', 2, 2), p('VP_non_cyclic', 3, 3), p('VP_non_cyclic', 4, 4), p('QP', 5, 5)])

(thereExists ?COSTUME5 
  (and 
    (and 
      (isa ?COSTUME5 Costume ) 
      (isa ?COSTUME5 Thing ) ) 
    (implies 
      (isa ?PRIZES15 AwardPractice ) 
      (implies 
        (isa ?GOT14 
          (VerbFn Get-TheWord ) ) 
        (eventSOT ?GOT14 ?COSTUME5 ?PRIZES15 Past ) ) ) ) )

e2c("some best costumes got prizes").

[[txt, some], [tag, staart, dt, dti, 'Adverb', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Postdeterminer', 'WHAdverb', 'WHDeterminer']]
[[txt, best], [tag, z, jjt, jjs, 'CountNoun', 'Adjective', 'Adverb']]
[[txt, costumes], [tag, z, nns, 'CountNoun']]
[[txt, got], [tag, z, vbd, vbn]]
[[txt, prizes], [tag, laast, nns, 'CountNoun']]

seg([p('QP', 1, 1), p('ADVP_non_cyclic', 2, 2), p('QP', 3, 3), p('VP_non_cyclic', 4, 4), p('QP', 5, 5)])

(thereExists ?COSTUMES10 
  (and 
    (and 
      (isa ?COSTUMES10 Costume ) 
      (isa ?COSTUMES10 Thing ) ) 
    (implies 
      (isa ?PRIZES23 AwardPractice ) 
      (implies 
        (isa ?GOT21 
          (VerbFn Get-TheWord ) ) 
        (eventSOT ?GOT21 ?COSTUMES10 ?PRIZES23 Past ) ) ) ) )

e2c("the best five costumes got prizes").

[[txt, a], [tag, staart, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, best], [tag, z, jjt, jjs, 'CountNoun', 'Adjective', 'Adverb']]
[[txt, five], [tag, z, cd, 'CountNoun', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, costumes], [tag, z, nns, 'CountNoun']]
[[txt, got], [tag, z, vbd, vbn]]
[[txt, prizes], [tag, laast, nns, 'CountNoun']]

seg([p('QP', 1, 1), p('ADVP_non_cyclic', 2, 2), p('QP', 3, 4), p('VP_non_cyclic', 5, 5), p('QP', 6, 6)])

(thereExistExactly 5 ?FIVE1 
  (and 
    (and 
      (isa ?FIVE1 Costume ) 
      (isa ?FIVE1 Thing ) ) 
    (implies 
      (isa ?PRIZES31 AwardPractice ) 
      (implies 
        (isa ?GOT28 
          (VerbFn Get-TheWord ) ) 
        (eventSOT ?GOT28 ?FIVE1 ?PRIZES31 Past ) ) ) ) )

e2c("the five best costumes got prizes").

[[txt, a], [tag, staart, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, five], [tag, z, cd, 'CountNoun', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, best], [tag, z, jjt, jjs, 'CountNoun', 'Adjective', 'Adverb']]
[[txt, costumes], [tag, z, nns, 'CountNoun']]
[[txt, got], [tag, z, vbd, vbn]]
[[txt, prizes], [tag, laast, nns, 'CountNoun']]

seg([p('QP', 1, 2), p('ADVP_non_cyclic', 3, 3), p('QP', 4, 4), p('VP_non_cyclic', 5, 5), p('QP', 6, 6)])

e2c("the five best five costumes got prizes").

[[txt, a], [tag, staart, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, five], [tag, z, cd, 'CountNoun', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, best], [tag, z, jjt, jjs, 'CountNoun', 'Adjective', 'Adverb']]
[[txt, five], [tag, z, cd, 'CountNoun', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, costumes], [tag, z, nns, 'CountNoun']]
[[txt, got], [tag, z, vbd, vbn]]
[[txt, prizes], [tag, laast, nns, 'CountNoun']]

seg([p('QP', 1, 2), p('ADVP_non_cyclic', 3, 3), p('QP', 4, 5), p('VP_non_cyclic', 6, 6), p('QP', 7, 7)])

e2c("the hundreds of best costumes got prizes").

[[txt, a], [tag, staart, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, hundreds], [tag, z, nns, 'CountNoun']]
[[txt, of], [tag, z, in, 'Preposition', 'Preposition-Of']]
[[txt, best], [tag, z, jjt, jjs, 'CountNoun', 'Adjective', 'Adverb']]
[[txt, costumes], [tag, z, nns, 'CountNoun']]
[[txt, got], [tag, z, vbd, vbn]]
[[txt, prizes], [tag, laast, nns, 'CountNoun']]

seg([p('QP', 1, 1), p('QP', 2, 2), p('PP_non_cyclic', 3, 3), p('ADVP_non_cyclic', 4, 4), p('QP', 5, 5), p('VP_non_cyclic', 6, 6), p('QP', 7, 7)])

e2c("five best costumes got prizes").

[[txt, five], [tag, staart, cd, 'CountNoun', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, best], [tag, z, jjt, jjs, 'CountNoun', 'Adjective', 'Adverb']]
[[txt, costumes], [tag, z, nns, 'CountNoun']]
[[txt, got], [tag, z, vbd, vbn]]
[[txt, prizes], [tag, laast, nns, 'CountNoun']]

seg([p('QP', 1, 1), p('ADVP_non_cyclic', 2, 2), p('QP', 3, 3), p('VP_non_cyclic', 4, 4), p('QP', 5, 5)])

e2c("best costumes got prizes").

[[txt, best], [tag, staart, jjt, jjs, 'CountNoun', 'Adjective', 'Adverb']]
[[txt, costumes], [tag, z, nns, 'CountNoun']]
[[txt, got], [tag, z, vbd, vbn]]
[[txt, prizes], [tag, laast, nns, 'CountNoun']]

seg([p('ADVP_non_cyclic', 1, 1), p('QP', 2, 2), p('VP_non_cyclic', 3, 3), p('QP', 4, 4)])

e2c("best five costumes got prizes").

[[txt, best], [tag, staart, jjt, jjs, 'CountNoun', 'Adjective', 'Adverb']]
[[txt, five], [tag, z, cd, 'CountNoun', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, costumes], [tag, z, nns, 'CountNoun']]
[[txt, got], [tag, z, vbd, vbn]]
[[txt, prizes], [tag, laast, nns, 'CountNoun']]

seg([p('ADVP_non_cyclic', 1, 1), p('QP', 2, 3), p('VP_non_cyclic', 4, 4), p('QP', 5, 5)])

(implies 
  (and 
    (and 
      (isa ?COSTUMES42 
        (NounFn Five-TheWord ) ) 
      (isa ?COSTUMES42 Costume ) ) 
    (hasEvaluativeQuantity ?COSTUMES42 
      (MediumToVeryHighAmountFn Goodness-Generic ) ) ) 
  (implies 
    (isa ?PRIZES65 AwardPractice ) 
    (implies 
      (isa ?GOT45 
        (VerbFn Get-TheWord ) ) 
      (eventSOT ?GOT45 ?COSTUMES42 ?PRIZES65 Past ) ) ) )

e2c("five other costumes got prizes").

[[txt, five], [tag, staart, cd, 'CountNoun', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, other], [tag, z, jj, ap, 'Adjective', 'CountNoun']]
[[txt, costumes], [tag, z, nns, 'CountNoun']]
[[txt, got], [tag, z, vbd, vbn]]
[[txt, prizes], [tag, laast, nns, 'CountNoun']]

seg([p('QP', 1, 1), p('PP_non_cyclic', 2, 2), p('QP', 3, 3), p('VP_non_cyclic', 4, 4), p('QP', 5, 5)])

(thereExistExactly 5 ?FIVE18 
  (and 
    (and 
      (and 
        (isa ?FIVE18 Costume ) 
        (isa ?FIVE18 Thing ) ) 
      (isa ?FIVE18 BIOS-OTHERSurveillanceSyndrome ) ) 
    (implies 
      (isa ?PRIZES73 AwardPractice ) 
      (implies 
        (isa ?GOT52 
          (VerbFn Get-TheWord ) ) 
        (eventSOT ?GOT52 ?FIVE18 ?PRIZES73 Past ) ) ) ) )

e2c("the other five costumes got prizes").

[[txt, a], [tag, staart, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, other], [tag, z, jj, ap, 'Adjective', 'CountNoun']]
[[txt, five], [tag, z, cd, 'CountNoun', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, costumes], [tag, z, nns, 'CountNoun']]
[[txt, got], [tag, z, vbd, vbn]]
[[txt, prizes], [tag, laast, nns, 'CountNoun']]

seg([p('QP', 1, 2), p('QP', 3, 4), p('VP_non_cyclic', 5, 5), p('QP', 6, 6)])

(thereExistExactly 5 ?FIVE19 
  (and 
    (and 
      (isa ?FIVE19 Costume ) 
      (isa ?FIVE19 Thing ) ) 
    (implies 
      (isa ?PRIZES81 AwardPractice ) 
      (implies 
        (isa ?GOT59 
          (VerbFn Get-TheWord ) ) 
        (eventSOT ?GOT59 ?FIVE19 ?PRIZES81 Past ) ) ) ) )

e2c("other five costumes got prizes").

[[txt, other], [tag, staart, jj, ap, 'Adjective', 'CountNoun']]
[[txt, five], [tag, z, cd, 'CountNoun', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, costumes], [tag, z, nns, 'CountNoun']]
[[txt, got], [tag, z, vbd, vbn]]
[[txt, prizes], [tag, laast, nns, 'CountNoun']]

seg([p('PP_non_cyclic', 1, 1), p('QP', 2, 3), p('VP_non_cyclic', 4, 4), p('QP', 5, 5)])

(implies 
  (and 
    (and 
      (isa ?OTHER12 
        (NounFn Five-TheWord ) ) 
      (isa ?OTHER12 Costume ) ) 
    (isa ?OTHER12 BIOS-OTHERSurveillanceSyndrome ) ) 
  (implies 
    (isa ?PRIZES89 AwardPractice ) 
    (implies 
      (isa ?GOT62 
        (VerbFn Get-TheWord ) ) 
      (eventSOT ?GOT62 ?OTHER12 ?PRIZES89 Past ) ) ) )

e2c("the other candy was really disgusting").

[[txt, a], [tag, staart, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, other], [tag, z, jj, ap, 'Adjective', 'CountNoun']]
[[txt, candy], [tag, z, nn, 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, was], [tag, z, bedz, vbd, 'BeAux']]
[[txt, really], [tag, z, rb, ql, 'Adverb', 'WHAdverb', 'CountNoun']]
[[txt, disgusting], [tag, laast, jj, 'GerundiveCountNoun', 'GerundiveNoun', 'MassNoun-Generic', 'Adjective']]

seg([p('QP', 1, 2), p('VP_non_cyclic', 3, 3), p('VP_non_cyclic', 4, 4), p('PP_non_cyclic', 5, 5), p('PP_non_cyclic', 6, 6)])

e2c("the five other candy was really disgusting").

[[txt, a], [tag, staart, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, five], [tag, z, cd, 'CountNoun', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, other], [tag, z, jj, ap, 'Adjective', 'CountNoun']]
[[txt, candy], [tag, z, nn, 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, was], [tag, z, bedz, vbd, 'BeAux']]
[[txt, really], [tag, z, rb, ql, 'Adverb', 'WHAdverb', 'CountNoun']]
[[txt, disgusting], [tag, laast, jj, 'GerundiveCountNoun', 'GerundiveNoun', 'MassNoun-Generic', 'Adjective']]

seg([p('QP', 1, 2), p('PP_non_cyclic', 3, 3), p('VP_non_cyclic', 4, 4), p('VP_non_cyclic', 5, 5), p('PP_non_cyclic', 6, 6), p('PP_non_cyclic', 7, 7)])

e2c("other candy is really disgusting").

[[txt, other], [tag, staart, jj, ap, 'Adjective', 'CountNoun']]
[[txt, candy], [tag, z, nn, 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, is], [tag, z, bez, vbz, 'BeAux']]
[[txt, really], [tag, z, rb, ql, 'Adverb', 'WHAdverb', 'CountNoun']]
[[txt, disgusting], [tag, laast, jj, 'GerundiveCountNoun', 'GerundiveNoun', 'MassNoun-Generic', 'Adjective']]

seg([p('PP_non_cyclic', 1, 1), p('VP_non_cyclic', 2, 2), p('VP_non_cyclic', 3, 3), p('PP_non_cyclic', 4, 4), p('PP_non_cyclic', 5, 5)])

e2c("other piece of candy was really bad").

[[txt, other], [tag, staart, jj, ap, 'Adjective', 'CountNoun']]
[[txt, piece], [tag, z, nn, 'CountNoun']]
[[txt, of], [tag, z, in, 'Preposition', 'Preposition-Of']]
[[txt, candy], [tag, z, nn, 'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, was], [tag, z, bedz, vbd, 'BeAux']]
[[txt, really], [tag, z, rb, ql, 'Adverb', 'WHAdverb', 'CountNoun']]
[[txt, bad], [tag, laast, jj, 'Adjective', 'MassNoun', 'MassNoun-Generic']]

seg([p('PP_non_cyclic', 1, 1), p('VP_non_cyclic', 2, 2), p('PP_non_cyclic', 3, 3), p('VP_non_cyclic', 4, 4), p('VP_non_cyclic', 5, 5), p('PP_non_cyclic', 6, 6), p('PP_non_cyclic', 7, 7)])

e2c("other costumes were really bad").

[[txt, other], [tag, staart, jj, ap, 'Adjective', 'CountNoun']]
[[txt, costumes], [tag, z, nns, 'CountNoun']]
[[txt, were], [tag, z, bed, vbd, 'BeAux']]
[[txt, really], [tag, z, rb, ql, 'Adverb', 'WHAdverb', 'CountNoun']]
[[txt, bad], [tag, laast, jj, 'Adjective', 'MassNoun', 'MassNoun-Generic']]

seg([p('PP_non_cyclic', 1, 1), p('QP', 2, 2), p('VP_non_cyclic', 3, 3), p('PP_non_cyclic', 4, 4), p('PP_non_cyclic', 5, 5)])

e2c("some other costumes were really bad").

[[txt, some], [tag, staart, dt, dti, 'Adverb', 'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC', 'Postdeterminer', 'WHAdverb', 'WHDeterminer']]
[[txt, other], [tag, z, jj, ap, 'Adjective', 'CountNoun']]
[[txt, costumes], [tag, z, nns, 'CountNoun']]
[[txt, were], [tag, z, bed, vbd, 'BeAux']]
[[txt, really], [tag, z, rb, ql, 'Adverb', 'WHAdverb', 'CountNoun']]
[[txt, bad], [tag, laast, jj, 'Adjective', 'MassNoun', 'MassNoun-Generic']]

seg([p('QP', 1, 2), p('QP', 3, 3), p('VP_non_cyclic', 4, 4), p('PP_non_cyclic', 5, 5), p('PP_non_cyclic', 6, 6)])

(thereExists ?OTHER52 
  (and 
    (and 
      (and 
        (isa ?OTHER52 Costume ) 
        (isa ?OTHER52 Thing ) ) 
      (isa ?OTHER52 BIOS-OTHERSurveillanceSyndrome ) ) 
    (implies 
      (and 
        (isa ?BAD14 
          (NounFn Real-TheWord ) ) 
        (isa ?BAD14 
          (OneOfFn Badness-Generic Badness-Moral ) ) ) 
      (and 
        (isa ?WERE6 Living ) 
        (occursDuring ?WERE6 Past ) 
        (preActors ?WERE6 ?OTHER52 ) 
        (actors ?WERE6 ?BAD14 ) ) ) ) )
